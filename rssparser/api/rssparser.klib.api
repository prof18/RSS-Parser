// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, macosArm64, macosX64, tvosArm64, tvosSimulatorArm64, tvosX64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <RSS-Parser:rssparser>
final class com.prof18.rssparser.exception/HttpException : kotlin/Exception { // com.prof18.rssparser.exception/HttpException|null[0]
    constructor <init>(kotlin/Int, kotlin/String?) // com.prof18.rssparser.exception/HttpException.<init>|<init>(kotlin.Int;kotlin.String?){}[0]
    final fun component1(): kotlin/Int // com.prof18.rssparser.exception/HttpException.component1|component1(){}[0]
    final fun component2(): kotlin/String? // com.prof18.rssparser.exception/HttpException.component2|component2(){}[0]
    final fun copy(kotlin/Int = ..., kotlin/String? = ...): com.prof18.rssparser.exception/HttpException // com.prof18.rssparser.exception/HttpException.copy|copy(kotlin.Int;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.prof18.rssparser.exception/HttpException.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.prof18.rssparser.exception/HttpException.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.prof18.rssparser.exception/HttpException.toString|toString(){}[0]
    final val code // com.prof18.rssparser.exception/HttpException.code|{}code[0]
        final fun <get-code>(): kotlin/Int // com.prof18.rssparser.exception/HttpException.code.<get-code>|<get-code>(){}[0]
    final val message // com.prof18.rssparser.exception/HttpException.message|{}message[0]
        final fun <get-message>(): kotlin/String? // com.prof18.rssparser.exception/HttpException.message.<get-message>|<get-message>(){}[0]
}
final class com.prof18.rssparser.exception/RssParsingException : kotlin/Exception { // com.prof18.rssparser.exception/RssParsingException|null[0]
    constructor <init>(kotlin/String?, kotlin/Throwable?) // com.prof18.rssparser.exception/RssParsingException.<init>|<init>(kotlin.String?;kotlin.Throwable?){}[0]
    final fun component1(): kotlin/String? // com.prof18.rssparser.exception/RssParsingException.component1|component1(){}[0]
    final fun component2(): kotlin/Throwable? // com.prof18.rssparser.exception/RssParsingException.component2|component2(){}[0]
    final fun copy(kotlin/String? = ..., kotlin/Throwable? = ...): com.prof18.rssparser.exception/RssParsingException // com.prof18.rssparser.exception/RssParsingException.copy|copy(kotlin.String?;kotlin.Throwable?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.prof18.rssparser.exception/RssParsingException.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.prof18.rssparser.exception/RssParsingException.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.prof18.rssparser.exception/RssParsingException.toString|toString(){}[0]
    final val cause // com.prof18.rssparser.exception/RssParsingException.cause|{}cause[0]
        final fun <get-cause>(): kotlin/Throwable? // com.prof18.rssparser.exception/RssParsingException.cause.<get-cause>|<get-cause>(){}[0]
    final val message // com.prof18.rssparser.exception/RssParsingException.message|{}message[0]
        final fun <get-message>(): kotlin/String? // com.prof18.rssparser.exception/RssParsingException.message.<get-message>|<get-message>(){}[0]
}
final class com.prof18.rssparser.model/ItunesChannelData { // com.prof18.rssparser.model/ItunesChannelData|null[0]
    constructor <init>(kotlin/String?, kotlin.collections/List<kotlin/String> = ..., kotlin/String?, kotlin/String?, kotlin/String?, kotlin.collections/List<kotlin/String>, kotlin/String?, com.prof18.rssparser.model/ItunesOwner?, kotlin/String?, kotlin/String?, kotlin/String?) // com.prof18.rssparser.model/ItunesChannelData.<init>|<init>(kotlin.String?;kotlin.collections.List<kotlin.String>;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.collections.List<kotlin.String>;kotlin.String?;com.prof18.rssparser.model.ItunesOwner?;kotlin.String?;kotlin.String?;kotlin.String?){}[0]
    final fun component1(): kotlin/String? // com.prof18.rssparser.model/ItunesChannelData.component1|component1(){}[0]
    final fun component10(): kotlin/String? // com.prof18.rssparser.model/ItunesChannelData.component10|component10(){}[0]
    final fun component11(): kotlin/String? // com.prof18.rssparser.model/ItunesChannelData.component11|component11(){}[0]
    final fun component2(): kotlin.collections/List<kotlin/String> // com.prof18.rssparser.model/ItunesChannelData.component2|component2(){}[0]
    final fun component3(): kotlin/String? // com.prof18.rssparser.model/ItunesChannelData.component3|component3(){}[0]
    final fun component4(): kotlin/String? // com.prof18.rssparser.model/ItunesChannelData.component4|component4(){}[0]
    final fun component5(): kotlin/String? // com.prof18.rssparser.model/ItunesChannelData.component5|component5(){}[0]
    final fun component6(): kotlin.collections/List<kotlin/String> // com.prof18.rssparser.model/ItunesChannelData.component6|component6(){}[0]
    final fun component7(): kotlin/String? // com.prof18.rssparser.model/ItunesChannelData.component7|component7(){}[0]
    final fun component8(): com.prof18.rssparser.model/ItunesOwner? // com.prof18.rssparser.model/ItunesChannelData.component8|component8(){}[0]
    final fun component9(): kotlin/String? // com.prof18.rssparser.model/ItunesChannelData.component9|component9(){}[0]
    final fun copy(kotlin/String? = ..., kotlin.collections/List<kotlin/String> = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin.collections/List<kotlin/String> = ..., kotlin/String? = ..., com.prof18.rssparser.model/ItunesOwner? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ...): com.prof18.rssparser.model/ItunesChannelData // com.prof18.rssparser.model/ItunesChannelData.copy|copy(kotlin.String?;kotlin.collections.List<kotlin.String>;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.collections.List<kotlin.String>;kotlin.String?;com.prof18.rssparser.model.ItunesOwner?;kotlin.String?;kotlin.String?;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.prof18.rssparser.model/ItunesChannelData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.prof18.rssparser.model/ItunesChannelData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.prof18.rssparser.model/ItunesChannelData.toString|toString(){}[0]
    final val author // com.prof18.rssparser.model/ItunesChannelData.author|{}author[0]
        final fun <get-author>(): kotlin/String? // com.prof18.rssparser.model/ItunesChannelData.author.<get-author>|<get-author>(){}[0]
    final val categories // com.prof18.rssparser.model/ItunesChannelData.categories|{}categories[0]
        final fun <get-categories>(): kotlin.collections/List<kotlin/String> // com.prof18.rssparser.model/ItunesChannelData.categories.<get-categories>|<get-categories>(){}[0]
    final val duration // com.prof18.rssparser.model/ItunesChannelData.duration|{}duration[0]
        final fun <get-duration>(): kotlin/String? // com.prof18.rssparser.model/ItunesChannelData.duration.<get-duration>|<get-duration>(){}[0]
    final val explicit // com.prof18.rssparser.model/ItunesChannelData.explicit|{}explicit[0]
        final fun <get-explicit>(): kotlin/String? // com.prof18.rssparser.model/ItunesChannelData.explicit.<get-explicit>|<get-explicit>(){}[0]
    final val image // com.prof18.rssparser.model/ItunesChannelData.image|{}image[0]
        final fun <get-image>(): kotlin/String? // com.prof18.rssparser.model/ItunesChannelData.image.<get-image>|<get-image>(){}[0]
    final val keywords // com.prof18.rssparser.model/ItunesChannelData.keywords|{}keywords[0]
        final fun <get-keywords>(): kotlin.collections/List<kotlin/String> // com.prof18.rssparser.model/ItunesChannelData.keywords.<get-keywords>|<get-keywords>(){}[0]
    final val newsFeedUrl // com.prof18.rssparser.model/ItunesChannelData.newsFeedUrl|{}newsFeedUrl[0]
        final fun <get-newsFeedUrl>(): kotlin/String? // com.prof18.rssparser.model/ItunesChannelData.newsFeedUrl.<get-newsFeedUrl>|<get-newsFeedUrl>(){}[0]
    final val owner // com.prof18.rssparser.model/ItunesChannelData.owner|{}owner[0]
        final fun <get-owner>(): com.prof18.rssparser.model/ItunesOwner? // com.prof18.rssparser.model/ItunesChannelData.owner.<get-owner>|<get-owner>(){}[0]
    final val subtitle // com.prof18.rssparser.model/ItunesChannelData.subtitle|{}subtitle[0]
        final fun <get-subtitle>(): kotlin/String? // com.prof18.rssparser.model/ItunesChannelData.subtitle.<get-subtitle>|<get-subtitle>(){}[0]
    final val summary // com.prof18.rssparser.model/ItunesChannelData.summary|{}summary[0]
        final fun <get-summary>(): kotlin/String? // com.prof18.rssparser.model/ItunesChannelData.summary.<get-summary>|<get-summary>(){}[0]
    final val type // com.prof18.rssparser.model/ItunesChannelData.type|{}type[0]
        final fun <get-type>(): kotlin/String? // com.prof18.rssparser.model/ItunesChannelData.type.<get-type>|<get-type>(){}[0]
}
final class com.prof18.rssparser.model/ItunesItemData { // com.prof18.rssparser.model/ItunesItemData|null[0]
    constructor <init>(kotlin/String?, kotlin/String?, kotlin/String?, kotlin/String?, kotlin/String?, kotlin/String?, kotlin.collections/List<kotlin/String>, kotlin/String?, kotlin/String?, kotlin/String?) // com.prof18.rssparser.model/ItunesItemData.<init>|<init>(kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.collections.List<kotlin.String>;kotlin.String?;kotlin.String?;kotlin.String?){}[0]
    final fun component1(): kotlin/String? // com.prof18.rssparser.model/ItunesItemData.component1|component1(){}[0]
    final fun component10(): kotlin/String? // com.prof18.rssparser.model/ItunesItemData.component10|component10(){}[0]
    final fun component2(): kotlin/String? // com.prof18.rssparser.model/ItunesItemData.component2|component2(){}[0]
    final fun component3(): kotlin/String? // com.prof18.rssparser.model/ItunesItemData.component3|component3(){}[0]
    final fun component4(): kotlin/String? // com.prof18.rssparser.model/ItunesItemData.component4|component4(){}[0]
    final fun component5(): kotlin/String? // com.prof18.rssparser.model/ItunesItemData.component5|component5(){}[0]
    final fun component6(): kotlin/String? // com.prof18.rssparser.model/ItunesItemData.component6|component6(){}[0]
    final fun component7(): kotlin.collections/List<kotlin/String> // com.prof18.rssparser.model/ItunesItemData.component7|component7(){}[0]
    final fun component8(): kotlin/String? // com.prof18.rssparser.model/ItunesItemData.component8|component8(){}[0]
    final fun component9(): kotlin/String? // com.prof18.rssparser.model/ItunesItemData.component9|component9(){}[0]
    final fun copy(kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin.collections/List<kotlin/String> = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ...): com.prof18.rssparser.model/ItunesItemData // com.prof18.rssparser.model/ItunesItemData.copy|copy(kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.collections.List<kotlin.String>;kotlin.String?;kotlin.String?;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.prof18.rssparser.model/ItunesItemData.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.prof18.rssparser.model/ItunesItemData.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.prof18.rssparser.model/ItunesItemData.toString|toString(){}[0]
    final val author // com.prof18.rssparser.model/ItunesItemData.author|{}author[0]
        final fun <get-author>(): kotlin/String? // com.prof18.rssparser.model/ItunesItemData.author.<get-author>|<get-author>(){}[0]
    final val duration // com.prof18.rssparser.model/ItunesItemData.duration|{}duration[0]
        final fun <get-duration>(): kotlin/String? // com.prof18.rssparser.model/ItunesItemData.duration.<get-duration>|<get-duration>(){}[0]
    final val episode // com.prof18.rssparser.model/ItunesItemData.episode|{}episode[0]
        final fun <get-episode>(): kotlin/String? // com.prof18.rssparser.model/ItunesItemData.episode.<get-episode>|<get-episode>(){}[0]
    final val episodeType // com.prof18.rssparser.model/ItunesItemData.episodeType|{}episodeType[0]
        final fun <get-episodeType>(): kotlin/String? // com.prof18.rssparser.model/ItunesItemData.episodeType.<get-episodeType>|<get-episodeType>(){}[0]
    final val explicit // com.prof18.rssparser.model/ItunesItemData.explicit|{}explicit[0]
        final fun <get-explicit>(): kotlin/String? // com.prof18.rssparser.model/ItunesItemData.explicit.<get-explicit>|<get-explicit>(){}[0]
    final val image // com.prof18.rssparser.model/ItunesItemData.image|{}image[0]
        final fun <get-image>(): kotlin/String? // com.prof18.rssparser.model/ItunesItemData.image.<get-image>|<get-image>(){}[0]
    final val keywords // com.prof18.rssparser.model/ItunesItemData.keywords|{}keywords[0]
        final fun <get-keywords>(): kotlin.collections/List<kotlin/String> // com.prof18.rssparser.model/ItunesItemData.keywords.<get-keywords>|<get-keywords>(){}[0]
    final val season // com.prof18.rssparser.model/ItunesItemData.season|{}season[0]
        final fun <get-season>(): kotlin/String? // com.prof18.rssparser.model/ItunesItemData.season.<get-season>|<get-season>(){}[0]
    final val subtitle // com.prof18.rssparser.model/ItunesItemData.subtitle|{}subtitle[0]
        final fun <get-subtitle>(): kotlin/String? // com.prof18.rssparser.model/ItunesItemData.subtitle.<get-subtitle>|<get-subtitle>(){}[0]
    final val summary // com.prof18.rssparser.model/ItunesItemData.summary|{}summary[0]
        final fun <get-summary>(): kotlin/String? // com.prof18.rssparser.model/ItunesItemData.summary.<get-summary>|<get-summary>(){}[0]
}
final class com.prof18.rssparser.model/ItunesOwner { // com.prof18.rssparser.model/ItunesOwner|null[0]
    constructor <init>(kotlin/String?, kotlin/String?) // com.prof18.rssparser.model/ItunesOwner.<init>|<init>(kotlin.String?;kotlin.String?){}[0]
    final fun component1(): kotlin/String? // com.prof18.rssparser.model/ItunesOwner.component1|component1(){}[0]
    final fun component2(): kotlin/String? // com.prof18.rssparser.model/ItunesOwner.component2|component2(){}[0]
    final fun copy(kotlin/String? = ..., kotlin/String? = ...): com.prof18.rssparser.model/ItunesOwner // com.prof18.rssparser.model/ItunesOwner.copy|copy(kotlin.String?;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.prof18.rssparser.model/ItunesOwner.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.prof18.rssparser.model/ItunesOwner.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.prof18.rssparser.model/ItunesOwner.toString|toString(){}[0]
    final val email // com.prof18.rssparser.model/ItunesOwner.email|{}email[0]
        final fun <get-email>(): kotlin/String? // com.prof18.rssparser.model/ItunesOwner.email.<get-email>|<get-email>(){}[0]
    final val name // com.prof18.rssparser.model/ItunesOwner.name|{}name[0]
        final fun <get-name>(): kotlin/String? // com.prof18.rssparser.model/ItunesOwner.name.<get-name>|<get-name>(){}[0]
}
final class com.prof18.rssparser.model/RssChannel { // com.prof18.rssparser.model/RssChannel|null[0]
    constructor <init>(kotlin/String?, kotlin/String?, kotlin/String?, com.prof18.rssparser.model/RssImage?, kotlin/String?, kotlin/String?, kotlin.collections/List<com.prof18.rssparser.model/RssItem>, com.prof18.rssparser.model/ItunesChannelData?) // com.prof18.rssparser.model/RssChannel.<init>|<init>(kotlin.String?;kotlin.String?;kotlin.String?;com.prof18.rssparser.model.RssImage?;kotlin.String?;kotlin.String?;kotlin.collections.List<com.prof18.rssparser.model.RssItem>;com.prof18.rssparser.model.ItunesChannelData?){}[0]
    final fun component1(): kotlin/String? // com.prof18.rssparser.model/RssChannel.component1|component1(){}[0]
    final fun component2(): kotlin/String? // com.prof18.rssparser.model/RssChannel.component2|component2(){}[0]
    final fun component3(): kotlin/String? // com.prof18.rssparser.model/RssChannel.component3|component3(){}[0]
    final fun component4(): com.prof18.rssparser.model/RssImage? // com.prof18.rssparser.model/RssChannel.component4|component4(){}[0]
    final fun component5(): kotlin/String? // com.prof18.rssparser.model/RssChannel.component5|component5(){}[0]
    final fun component6(): kotlin/String? // com.prof18.rssparser.model/RssChannel.component6|component6(){}[0]
    final fun component7(): kotlin.collections/List<com.prof18.rssparser.model/RssItem> // com.prof18.rssparser.model/RssChannel.component7|component7(){}[0]
    final fun component8(): com.prof18.rssparser.model/ItunesChannelData? // com.prof18.rssparser.model/RssChannel.component8|component8(){}[0]
    final fun copy(kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., com.prof18.rssparser.model/RssImage? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin.collections/List<com.prof18.rssparser.model/RssItem> = ..., com.prof18.rssparser.model/ItunesChannelData? = ...): com.prof18.rssparser.model/RssChannel // com.prof18.rssparser.model/RssChannel.copy|copy(kotlin.String?;kotlin.String?;kotlin.String?;com.prof18.rssparser.model.RssImage?;kotlin.String?;kotlin.String?;kotlin.collections.List<com.prof18.rssparser.model.RssItem>;com.prof18.rssparser.model.ItunesChannelData?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.prof18.rssparser.model/RssChannel.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.prof18.rssparser.model/RssChannel.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.prof18.rssparser.model/RssChannel.toString|toString(){}[0]
    final val description // com.prof18.rssparser.model/RssChannel.description|{}description[0]
        final fun <get-description>(): kotlin/String? // com.prof18.rssparser.model/RssChannel.description.<get-description>|<get-description>(){}[0]
    final val image // com.prof18.rssparser.model/RssChannel.image|{}image[0]
        final fun <get-image>(): com.prof18.rssparser.model/RssImage? // com.prof18.rssparser.model/RssChannel.image.<get-image>|<get-image>(){}[0]
    final val items // com.prof18.rssparser.model/RssChannel.items|{}items[0]
        final fun <get-items>(): kotlin.collections/List<com.prof18.rssparser.model/RssItem> // com.prof18.rssparser.model/RssChannel.items.<get-items>|<get-items>(){}[0]
    final val itunesChannelData // com.prof18.rssparser.model/RssChannel.itunesChannelData|{}itunesChannelData[0]
        final fun <get-itunesChannelData>(): com.prof18.rssparser.model/ItunesChannelData? // com.prof18.rssparser.model/RssChannel.itunesChannelData.<get-itunesChannelData>|<get-itunesChannelData>(){}[0]
    final val lastBuildDate // com.prof18.rssparser.model/RssChannel.lastBuildDate|{}lastBuildDate[0]
        final fun <get-lastBuildDate>(): kotlin/String? // com.prof18.rssparser.model/RssChannel.lastBuildDate.<get-lastBuildDate>|<get-lastBuildDate>(){}[0]
    final val link // com.prof18.rssparser.model/RssChannel.link|{}link[0]
        final fun <get-link>(): kotlin/String? // com.prof18.rssparser.model/RssChannel.link.<get-link>|<get-link>(){}[0]
    final val title // com.prof18.rssparser.model/RssChannel.title|{}title[0]
        final fun <get-title>(): kotlin/String? // com.prof18.rssparser.model/RssChannel.title.<get-title>|<get-title>(){}[0]
    final val updatePeriod // com.prof18.rssparser.model/RssChannel.updatePeriod|{}updatePeriod[0]
        final fun <get-updatePeriod>(): kotlin/String? // com.prof18.rssparser.model/RssChannel.updatePeriod.<get-updatePeriod>|<get-updatePeriod>(){}[0]
}
final class com.prof18.rssparser.model/RssImage { // com.prof18.rssparser.model/RssImage|null[0]
    constructor <init>(kotlin/String?, kotlin/String?, kotlin/String?, kotlin/String?) // com.prof18.rssparser.model/RssImage.<init>|<init>(kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?){}[0]
    final fun component1(): kotlin/String? // com.prof18.rssparser.model/RssImage.component1|component1(){}[0]
    final fun component2(): kotlin/String? // com.prof18.rssparser.model/RssImage.component2|component2(){}[0]
    final fun component3(): kotlin/String? // com.prof18.rssparser.model/RssImage.component3|component3(){}[0]
    final fun component4(): kotlin/String? // com.prof18.rssparser.model/RssImage.component4|component4(){}[0]
    final fun copy(kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ...): com.prof18.rssparser.model/RssImage // com.prof18.rssparser.model/RssImage.copy|copy(kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.prof18.rssparser.model/RssImage.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.prof18.rssparser.model/RssImage.hashCode|hashCode(){}[0]
    final fun isNotEmpty(): kotlin/Boolean // com.prof18.rssparser.model/RssImage.isNotEmpty|isNotEmpty(){}[0]
    final fun toString(): kotlin/String // com.prof18.rssparser.model/RssImage.toString|toString(){}[0]
    final val description // com.prof18.rssparser.model/RssImage.description|{}description[0]
        final fun <get-description>(): kotlin/String? // com.prof18.rssparser.model/RssImage.description.<get-description>|<get-description>(){}[0]
    final val link // com.prof18.rssparser.model/RssImage.link|{}link[0]
        final fun <get-link>(): kotlin/String? // com.prof18.rssparser.model/RssImage.link.<get-link>|<get-link>(){}[0]
    final val title // com.prof18.rssparser.model/RssImage.title|{}title[0]
        final fun <get-title>(): kotlin/String? // com.prof18.rssparser.model/RssImage.title.<get-title>|<get-title>(){}[0]
    final val url // com.prof18.rssparser.model/RssImage.url|{}url[0]
        final fun <get-url>(): kotlin/String? // com.prof18.rssparser.model/RssImage.url.<get-url>|<get-url>(){}[0]
}
final class com.prof18.rssparser.model/RssItem { // com.prof18.rssparser.model/RssItem|null[0]
    constructor <init>(kotlin/String?, kotlin/String?, kotlin/String?, kotlin/String?, kotlin/String?, kotlin/String?, kotlin/String?, kotlin/String?, kotlin/String?, kotlin/String?, kotlin/String?, kotlin/String?, kotlin.collections/List<kotlin/String>, com.prof18.rssparser.model/ItunesItemData?, kotlin/String?) // com.prof18.rssparser.model/RssItem.<init>|<init>(kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.collections.List<kotlin.String>;com.prof18.rssparser.model.ItunesItemData?;kotlin.String?){}[0]
    final fun component1(): kotlin/String? // com.prof18.rssparser.model/RssItem.component1|component1(){}[0]
    final fun component10(): kotlin/String? // com.prof18.rssparser.model/RssItem.component10|component10(){}[0]
    final fun component11(): kotlin/String? // com.prof18.rssparser.model/RssItem.component11|component11(){}[0]
    final fun component12(): kotlin/String? // com.prof18.rssparser.model/RssItem.component12|component12(){}[0]
    final fun component13(): kotlin.collections/List<kotlin/String> // com.prof18.rssparser.model/RssItem.component13|component13(){}[0]
    final fun component14(): com.prof18.rssparser.model/ItunesItemData? // com.prof18.rssparser.model/RssItem.component14|component14(){}[0]
    final fun component15(): kotlin/String? // com.prof18.rssparser.model/RssItem.component15|component15(){}[0]
    final fun component2(): kotlin/String? // com.prof18.rssparser.model/RssItem.component2|component2(){}[0]
    final fun component3(): kotlin/String? // com.prof18.rssparser.model/RssItem.component3|component3(){}[0]
    final fun component4(): kotlin/String? // com.prof18.rssparser.model/RssItem.component4|component4(){}[0]
    final fun component5(): kotlin/String? // com.prof18.rssparser.model/RssItem.component5|component5(){}[0]
    final fun component6(): kotlin/String? // com.prof18.rssparser.model/RssItem.component6|component6(){}[0]
    final fun component7(): kotlin/String? // com.prof18.rssparser.model/RssItem.component7|component7(){}[0]
    final fun component8(): kotlin/String? // com.prof18.rssparser.model/RssItem.component8|component8(){}[0]
    final fun component9(): kotlin/String? // com.prof18.rssparser.model/RssItem.component9|component9(){}[0]
    final fun copy(kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin/String? = ..., kotlin.collections/List<kotlin/String> = ..., com.prof18.rssparser.model/ItunesItemData? = ..., kotlin/String? = ...): com.prof18.rssparser.model/RssItem // com.prof18.rssparser.model/RssItem.copy|copy(kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.String?;kotlin.collections.List<kotlin.String>;com.prof18.rssparser.model.ItunesItemData?;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.prof18.rssparser.model/RssItem.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.prof18.rssparser.model/RssItem.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.prof18.rssparser.model/RssItem.toString|toString(){}[0]
    final val audio // com.prof18.rssparser.model/RssItem.audio|{}audio[0]
        final fun <get-audio>(): kotlin/String? // com.prof18.rssparser.model/RssItem.audio.<get-audio>|<get-audio>(){}[0]
    final val author // com.prof18.rssparser.model/RssItem.author|{}author[0]
        final fun <get-author>(): kotlin/String? // com.prof18.rssparser.model/RssItem.author.<get-author>|<get-author>(){}[0]
    final val categories // com.prof18.rssparser.model/RssItem.categories|{}categories[0]
        final fun <get-categories>(): kotlin.collections/List<kotlin/String> // com.prof18.rssparser.model/RssItem.categories.<get-categories>|<get-categories>(){}[0]
    final val commentsUrl // com.prof18.rssparser.model/RssItem.commentsUrl|{}commentsUrl[0]
        final fun <get-commentsUrl>(): kotlin/String? // com.prof18.rssparser.model/RssItem.commentsUrl.<get-commentsUrl>|<get-commentsUrl>(){}[0]
    final val content // com.prof18.rssparser.model/RssItem.content|{}content[0]
        final fun <get-content>(): kotlin/String? // com.prof18.rssparser.model/RssItem.content.<get-content>|<get-content>(){}[0]
    final val description // com.prof18.rssparser.model/RssItem.description|{}description[0]
        final fun <get-description>(): kotlin/String? // com.prof18.rssparser.model/RssItem.description.<get-description>|<get-description>(){}[0]
    final val guid // com.prof18.rssparser.model/RssItem.guid|{}guid[0]
        final fun <get-guid>(): kotlin/String? // com.prof18.rssparser.model/RssItem.guid.<get-guid>|<get-guid>(){}[0]
    final val image // com.prof18.rssparser.model/RssItem.image|{}image[0]
        final fun <get-image>(): kotlin/String? // com.prof18.rssparser.model/RssItem.image.<get-image>|<get-image>(){}[0]
    final val itunesItemData // com.prof18.rssparser.model/RssItem.itunesItemData|{}itunesItemData[0]
        final fun <get-itunesItemData>(): com.prof18.rssparser.model/ItunesItemData? // com.prof18.rssparser.model/RssItem.itunesItemData.<get-itunesItemData>|<get-itunesItemData>(){}[0]
    final val link // com.prof18.rssparser.model/RssItem.link|{}link[0]
        final fun <get-link>(): kotlin/String? // com.prof18.rssparser.model/RssItem.link.<get-link>|<get-link>(){}[0]
    final val pubDate // com.prof18.rssparser.model/RssItem.pubDate|{}pubDate[0]
        final fun <get-pubDate>(): kotlin/String? // com.prof18.rssparser.model/RssItem.pubDate.<get-pubDate>|<get-pubDate>(){}[0]
    final val sourceName // com.prof18.rssparser.model/RssItem.sourceName|{}sourceName[0]
        final fun <get-sourceName>(): kotlin/String? // com.prof18.rssparser.model/RssItem.sourceName.<get-sourceName>|<get-sourceName>(){}[0]
    final val sourceUrl // com.prof18.rssparser.model/RssItem.sourceUrl|{}sourceUrl[0]
        final fun <get-sourceUrl>(): kotlin/String? // com.prof18.rssparser.model/RssItem.sourceUrl.<get-sourceUrl>|<get-sourceUrl>(){}[0]
    final val title // com.prof18.rssparser.model/RssItem.title|{}title[0]
        final fun <get-title>(): kotlin/String? // com.prof18.rssparser.model/RssItem.title.<get-title>|<get-title>(){}[0]
    final val video // com.prof18.rssparser.model/RssItem.video|{}video[0]
        final fun <get-video>(): kotlin/String? // com.prof18.rssparser.model/RssItem.video.<get-video>|<get-video>(){}[0]
}
final class com.prof18.rssparser/RssParser { // com.prof18.rssparser/RssParser|null[0]
    final suspend fun getRssChannel(kotlin/String): com.prof18.rssparser.model/RssChannel // com.prof18.rssparser/RssParser.getRssChannel|getRssChannel(kotlin.String){}[0]
    final suspend fun parse(kotlin/String): com.prof18.rssparser.model/RssChannel // com.prof18.rssparser/RssParser.parse|parse(kotlin.String){}[0]
}
final class com.prof18.rssparser/RssParserBuilder : com.prof18.rssparser/RssParser.Builder { // com.prof18.rssparser/RssParserBuilder|null[0]
    constructor <init>(platform.Foundation/NSURLSession = ...) // com.prof18.rssparser/RssParserBuilder.<init>|<init>(platform.Foundation.NSURLSession){}[0]
    final fun build(): com.prof18.rssparser/RssParser // com.prof18.rssparser/RssParserBuilder.build|build(){}[0]
}
final fun com.prof18.rssparser/RssParser(): com.prof18.rssparser/RssParser // com.prof18.rssparser/RssParser|RssParser(){}[0]
